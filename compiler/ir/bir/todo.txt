Properly handle external (not BirElement) symbols
Properly handle IrExternalPackageFragment, which is not directly attached to the IR tree - maybe also add externalPackages child to BirModuleFragment
Back references
    Decide on arrays vs. linked lists - measure perf, esp. removing element
    Protocol for (sub)tree attach/detach
    Decide on egaer/lazy removal of back references
    Properly handle multiple refs to the same element (if that can ever happen)
    Investigate using multiple 'channels' of back refs (dedicated back refs)
    Reimplement correspondingProperty with back refs
    Investigate storing back references in aux data storage
        Also with restricted scope as other aux data
Per element aux data storage
    Restricted scope
        Per phase / per backend / serialization / fir2ir/ codegen
        Maybe dedicate a class that is both key and token for global data
    Remove reflection?
Reshape BIR tree
    Do something with LateBindFunction/Property?
By class element cache (getAllElementsOfType)
    Try to use contextual properties
        Not blocked by but nice to have https://youtrack.jetbrains.com/issue/KT-58151/Allow-specifying-context-receivers-on-individual-property-accessors
    Collapse classes into groups (e.g. collect all BirFieldAccess'es at once)
    Maybe allow custom categorisation, not only by class
Tree mutation-while-traversing protocol
Maybe eventually remove descriptors, but they seem necessary for now
Reorder fields in Impl classes even more
Try to reduce symbol hierarchy - esp. for removed by-private-symbol references
Don't store list as element's parent, use list id instead
    - Store the list id in a few bits in its size field
    - Generate function to get list by id